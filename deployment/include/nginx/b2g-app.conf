set_real_ip_from 127.0.0.0/8;
set_real_ip_from 192.168.0.0/16;
set_real_ip_from 172.16.0.0/12;
set_real_ip_from 10.0.0.0/8;
# real_ip_recursive on;
# real_ip_header X-Forwarded-For;

geo $geo {
    proxy_recursive;
    proxy               127.0.0.0/8;
    proxy               192.168.0.0/16;
    proxy               172.16.0.0/12;
    proxy               10.0.0.0/8;

    127.0.0.1/32        vpn;
    172.27.240.68/32    vpn;

    # docker
    172.16.0.0/12       vpn;

    # nick home
    192.168.0.0/16      vpn;

    default             default;
}

# reflect xdebug_session cookie / argument / remote hostname
map "$geo:$remote_addr:$cookie_xdebug_session:$arg_xdebug_session:$http_host" $xdebug {
    #"vpn:172.27.240.68:nick.lavrik" "1";
    #"~^vpn:192.168.*:nick.lavrik"   "1";
    "~^vpn:.+:nick.lavrik"           "1"; # $_COOKIE['XDEBUG_SESSION']=nick.lavrik
    "~^vpn:.+::nick.lavrik"          "1"; # ?XDEBUG_SESSION=nick.lavrik
    "~^vpn:.+:.*:.*:www.b2g-app.com" "1"; # remote xdebug (local code / remote database)
    "~^vpn:.+:.*:.*:b2g-app.com"     "1"; # remote xdebug (local code / remote database)
    "~^vpn:.+:"                      ""; # set "1" => always xphp from trusted network
    default                          ""; # XDEBUG=OFF
}

# force XDEBUG_SESSION cookie in "external request" at any case (bypass to upstream)
# TODO: do we need the same for browser? (send back in response)
map "$geo:$http_host" $header_http_cookie {
    "~^vpn:www.b2g-app.com" "XDEBUG_SESSION=nick.lavrik; $http_cookie";
    "~^vpn:b2g-app.com"     "XDEBUG_SESSION=nick.lavrik; $http_cookie";
    default                 "$http_cookie";
}

# set $upstream
map "$geo:$xdebug:$cookie_upstream" $upstream {
    default                         "php";  # default upstream
    "~^vpn:.*:(?<up>.+)$"           "$up";  # $_COOKIE['upstream'] => $upstream
    "~^vpn:1:$"                     "xphp"; # xdebug detected => xphp container
}

map "$geo:$xdebug:$cookie_env" $app_env {
    default                    "";     # "prod" by default - do not setup
    "~^vpn:.*:(?<env>.+)$"     "$env"; # $_COOKIE['env'] => $_SERVER['APP_ENV']
    "~^vpn:1:$"                "";     # "dev" by default - do not setup
}

map "$geo:$xdebug:$app_env:$cookie_debug" $app_debug {
    default                               "";
    "~vpn:.*:.*:(?<debug>true|false|1|0)$" "$debug"; # $_COOKIE['debug'] => $_ENV['APP_DEBUG']
    "~vpn:1:dev:$"                        "1";
    "~vpn:1:prod:$"                       ""; # 0 - by default - do not setup $_SERVER
}

# forward X-Request-Id
map "$map_request_id" $x_request_id {
    "~:::$"    $request_id;
    "~:::.+"   $http_x_request_id;
    "~::.+"    $http_x_forwarded_request_id;
    "~:.+:"    $http_forwarded_request_id;
    default    $request_id;
}

map $upstream_http_x_request_id $x_upstream_id {
    ""                          $request_id;
    default                     "";
}

map "$geo:$app_env" $header_app_env {
    "~vpn:.+"       "$app_env";
    default         "";
}

map "$geo:$app_debug" $header_app_debug {
    "~vpn:.+"         "$app_debug";
    default           "";
}

map "$geo:$remote_addr" $header_remote_addr {
    "~vpn:.+"           "$remote_addr";
    "~:.+"              "$remote_addr"; # show by default
    default             "";
}

map "$geo:$x_request_id" $header_x_request_id {
    "~vpn:.+"            "$x_request_id";
    default              "";
}

map "$geo:$geo" $header_geo {
    "~vpn:.+"   "$geo";
    default     "";
}

map "$geo:$xdebug" $header_xdebug {
    "~vpn:.+"      "$xdebug";
    default        "";
}

map "$geo:$upstream" $header_upstream {
    "~vpn:.+"        "$upstream";
    default          "";
}

# log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
#                   '$status $body_bytes_sent "$http_referer" '
#                   '"$http_user_agent" "$http_x_forwarded_for"';
# php: %{HTTP_X_REQUEST_ID}e - %t \"%m %{REQUEST_SCHEME}e://%{HTTP_HOST}e%{REQUEST_URI}e%Q%q %{SERVER_PROTOCOL}e\" %s %l
# log_format php-fpm "$x_request_id - $time_iso8601 \"$request_method $scheme//$host$request_uri $server_protocol\" $status $content_length";

# log_format php-fpm "$x_request_id - $time_iso8601 \"$request_method $request_uri $server_protocol\" $status $body_bytes_sent ($upstream)";
# log_format upstream "$http_x_request_id - $time_iso8601 \"$request_method $request_uri $server_protocol\" $status $body_bytes_sent (+++)";
# access_log off;

# log_format php-fpm "$time_iso8601 $remote_addr $upstream \"$request_method $request_uri $server_protocol\" $status $body_bytes_sent";
# access_log off;

gzip on;
gzip_disable "msie6";
gzip_types text/plain text/css text/csv text/xml text/javascript
           application/json application/x-javascript application/javascript
           application/xml application/xml+rss;

server {
    include x_request_id;

    listen 80 default_server;
    server_name _;
    server_name b2g-app b2g-app.com www.b2g-app.com;

    error_log /proc/self/fd/2 notice;
    # error_log /proc/self/fd/1 debug;
    access_log /proc/self/fd/1 php-fpm;
    # access_log off; # do not log static files
    client_max_body_size 10m;

    root /app/b2g-app/public;

    location / {
        # try to serve file directly, fallback to index.php
        access_log off; # do not log static files
        # access_log /proc/self/fd/1 static;
        # try_files $uri $uri/ /index.php$is_args$args;
        # try_files $uri $uri/ @rewrite;
        try_files $uri @rewrite;
    }

    location @rewrite {
        rewrite ^/(.*)$ /index.php/$1 last;
    }

    location = /stub_status {
        stub_status;
        allow 127.0.0.0/8;
        allow 192.168.0.0/16;
        allow 172.16.0.0/12;
        deny all;
    }

    # health-check
    location ~ ^/(status|ping)$ {
        access_log off;

        #%access_restriction%
        allow 127.0.0.0/8;
        allow 192.168.0.0/16;
        allow 172.16.0.0/12;
        allow 10.0.0.0/8;
        deny all;

        #access_log off;

        fastcgi_pass $upstream;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;

        fastcgi_param HTTPS                  off;
        fastcgi_param SCRIPT_FILENAME        $document_root$fastcgi_script_name;
        fastcgi_param HTTP_X_FORWARDED_FOR   $http_x_forwarded_for;
        fastcgi_param HTTP_X_FORWARDED_PROTO $scheme;

        include fastcgi_params;
    }

    # optionally disable falling back to PHP script for the asset directories;
    # nginx will return a 404 error when files are not found instead of passing the
    # request to Symfony (improves performance but Symfony's 404 page is not displayed)
    # location /bundles {
    #     try_files $uri =404;
    # }

    location ~ ^/index\.php(/|$) {
        access_log /proc/self/fd/1 php-fpm;
        alias /app/public;

        fastcgi_pass $upstream;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;

        fastcgi_connect_timeout 300;
        fastcgi_send_timeout    300;
        fastcgi_read_timeout    600;

        include fastcgi_params;

        # optionally set the value of the environment variables used in the application
        # fastcgi_param APP_ENV prod;
        # fastcgi_param APP_SECRET <app-secret-id>;
        # fastcgi_param DATABASE_URL "mysql://db_user:db_pass@host:3306/db_name";

        # When you are using symlinks to link the document root to the
        # current version of your application, you should pass the real
        # application path instead of the path to the symlink to PHP
        # FPM.
        # Otherwise, PHP's OPcache may not properly detect changes to
        # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
        # for more information).
        # fastcgi_param SCRIPT_FILENAME   /app/web$fastcgi_script_name;
        # fastcgi_param SCRIPT_FILENAME   $realpath_root$fastcgi_script_name;
        fastcgi_param SCRIPT_FILENAME   $document_root$fastcgi_script_name;
        # fastcgi_param DOCUMENT_ROOT     /app/web;
        # fastcgi_param DOCUMENT_ROOT     $realpath_root;
        # fastcgi_param DOCUMENT_ROOT     $document_root;

        fastcgi_param APP_ENV           $app_env      if_not_empty;
        fastcgi_param APP_DEBUG         $app_debug    if_not_empty;
        fastcgi_param HTTP_UPSTREAM     $upstream     if_not_empty;
        fastcgi_param HTTP_X_REQUEST_ID $x_request_id if_not_empty;

        add_header X-Debug-App-Env   $header_app_env;
        add_header X-Debug-App-Debug $header_app_debug;
        add_header X-Debug-Upstream  $header_upstream;
        fastcgi_param HTTP_COOKIE    $header_http_cookie;

        #proxy_set_header  X-Forwarded-Proto $scheme;

        # Prevents URIs that include the front controller. This will 404:
        # http://domain.tld/index.php/some-path
        # Remove the internal directive to allow URIs like this
        internal;
    }

    # return 404 for all other php files not matching the front controller
    # this prevents access to other php files you don't want to be accessible.
    location ~ \.php$ {
        return 404;
    }

    #add_header X-Debug-Cookie      $header_http_cookie;
    #add_header X-Debug-Host        $http_host;
    add_header X-Debug-Remote-Addr $header_remote_addr;
    add_header X-Debug-Request-Id  $header_x_request_id;
    add_header X-Debug-Geo         $header_geo;
    add_header X-Debug-Xdebug      $header_xdebug;
}
